@page "/notelist"
@using BlazorEF.Shared.Services
@using BlazorEF.Shared.Models
@using BlazorEF.Shared
@inject INoteService NoteService

<h1>Notes</h1>

<div class="row">
    <div class="col-md-6">
        <a href='/note/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Note
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search title"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterNote" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />

@if (_noteList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Message</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var note in _noteList)
            {
                <tr>
                    <td>@note.NoteId</td>
                    <td>@note.Title</td>
                    <td>@note.Message.Truncate(50)</td>
                    <td>
                        <a href='/note/edit?noteId=@note.NoteId' class="btn btn-outline-dark" role="button">Edit</a>
                        <a href='/note/delete?noteId=@note.NoteId' class="btn btn-outline-danger" role="button">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<NoteModel> _noteList = new();
    private List<NoteModel> _searchNoteData = new();
    private string SearchString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetNotes();
    }

    private async Task GetNotes()
    {
        _noteList = await NoteService.ReadAll();
        _searchNoteData = _noteList;
    }

    private void FilterNote()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            _noteList = _searchNoteData
                .Where(x => x.Title != null && x.Title.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            _noteList = _searchNoteData;
        }
    }

    private void ResetSearch()
    {
        SearchString = string.Empty;
        _noteList = _searchNoteData;
    }
}