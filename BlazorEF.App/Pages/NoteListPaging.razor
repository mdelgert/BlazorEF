@page "/notelistpaging"
@page "/notelistpaging/{Page:int}"
@using BlazorEF.Shared
@using BlazorEF.Shared.Models
@using BlazorEF.Shared.Services
@inject INoteService NoteService

<h2>Notes</h2>

<div class="row">
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search title"
               @bind="Search" @bind:event="oninput" @onkeyup="SearchClick"/>
    </div>
</div>
<br/>
<div class="row">
    <table class="table table-bordered">
        <thead>
        <tr>
            <th>Title</th>
            <th>Message</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var note in Data)
        {
            <tr @key="note.NoteId">
                <td>@note.Title</td>
                <td>@note.Message.Truncate(50)</td>
                <td>
                        <a class="btn btn-primary" href="/note/edit?noteId=@note.NoteId">Edit</a>
                    <a class="btn btn-danger" href="/note/delete?noteId=@note.NoteId">Delete</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

<div class="row">
    <ul class="pagination">
        <li class="page-item">
            <a class="page-link" href="#">Previous</a>
        </li>
        @for (var i = 1; i <= TotalPages; i++)
        {
            <li class="page-item @(i == CurrentPage ? "active" : "")">
                <a href="/notelistpaging/@i" class="page-link">@i</a>
            </li>
        }
        <li class="page-item">
            <a class="page-link" href="#">Next</a>
        </li>
    </ul>
</div>

@code {

    //https://getbootstrap.com/docs/5.2/components/pagination/

    [Parameter]
    public int Page { get; set; } = 1;

    public int CurrentPage { get; set; } = 1;
    public int Count { get; set; }
    public int PageSize { get; set; } = 5;
    public int TotalPages => (int) Math.Ceiling(decimal.Divide(Count, PageSize));
    public List<NoteModel> Data { get; set; }
    public string Search { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Page = 1;
        await BindGrid();
    }

    protected override async void OnParametersSet()
    {
        await BindGrid();
    }

    private async Task BindGrid()
    {
        var result = await NoteService.ShowAllNotes(Search, Page == 0 ? 1 : Page, PageSize);
        Count = await NoteService.GetCount(Search);
        Data = result;
        CurrentPage = Page;
    }

    private async Task SearchClick()
    {
        if (!string.IsNullOrEmpty(Search))
        {
            Page = 1;
            var result = await NoteService.ShowAllNotes(Search, Page == 0 ? 1 : Page, PageSize);
            Count = await NoteService.GetCount(Search);
            Data = result;
            CurrentPage = Page;
        }
    }

    private async Task ClearClick()
    {
        Search = string.Empty;
        Page = 1;
        var result = await NoteService.ShowAllNotes(Search, Page == 0 ? 1 : Page, PageSize);
        Count = await NoteService.GetCount(Search);
        Data = result;
        CurrentPage = Page;
    }

}